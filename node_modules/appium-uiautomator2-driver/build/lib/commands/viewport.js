"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWindowSize = exports.getDisplayDensity = exports.getWindowRect = exports.mobileViewPortRect = exports.getViewPortRect = exports.getDevicePixelRatio = exports.getStatusBarHeight = void 0;
// memoized in constructor
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<number>}
 */
async function getStatusBarHeight() {
    const { statusBar } = /** @type {{statusBar: number}} */ (await /** @type {import('../uiautomator2').UiAutomator2Server} */ (this.uiautomator2).jwproxy.command(`/appium/device/system_bars`, 'GET', {}));
    return statusBar;
}
exports.getStatusBarHeight = getStatusBarHeight;
// memoized in constructor
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<string>}
 */
async function getDevicePixelRatio() {
    return String(await /** @type {import('../uiautomator2').UiAutomator2Server} */ (this.uiautomator2).jwproxy.command('/appium/device/pixel_ratio', 'GET', {}));
}
exports.getDevicePixelRatio = getDevicePixelRatio;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<import('./types').RelativeRect>}
 */
async function getViewPortRect() {
    const windowSize = await this.getWindowSize();
    const statusBarHeight = await this.getStatusBarHeight();
    // android returns the upscaled window size, so to get the true size of the
    // rect we have to downscale
    return {
        left: 0,
        top: statusBarHeight,
        width: windowSize.width,
        height: windowSize.height - statusBarHeight,
    };
}
exports.getViewPortRect = getViewPortRect;
/**
 * Returns the viewport coordinates.
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<import('./types').RelativeRect>} The viewport coordinates.
 */
async function mobileViewPortRect() {
    return await this.getViewPortRect();
}
exports.mobileViewPortRect = mobileViewPortRect;
// For W3C
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<import('@appium/types').Rect>}
 */
async function getWindowRect() {
    const { width, height } = await this.getWindowSize();
    return {
        width,
        height,
        x: 0,
        y: 0,
    };
}
exports.getWindowRect = getWindowRect;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<number>}
 */
async function getDisplayDensity() {
    return /** @type {number} */ (await this.uiautomator2.jwproxy.command('/appium/device/display_density', 'GET', {}));
}
exports.getDisplayDensity = getDisplayDensity;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<import('@appium/types').Size>}
 */
async function getWindowSize() {
    return /** @type {import('@appium/types').Size} */ (await this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {}));
}
exports.getWindowSize = getWindowSize;
/**
 * @typedef {import('../driver').AndroidUiautomator2Driver} AndroidUiautomator2Driver
 */
//# sourceMappingURL=viewport.js.map