"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mobileGetDeviceInfo = exports.suspendChromedriverProxy = exports.openNotifications = exports.getClipboard = exports.setOrientation = exports.getOrientation = exports.getPageSource = void 0;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<string>}
 */
async function getPageSource() {
    return String(await this.uiautomator2.jwproxy.command('/source', 'GET', {}));
}
exports.getPageSource = getPageSource;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<import('@appium/types').Orientation>}
 */
async function getOrientation() {
    return /** @type {import('@appium/types').Orientation} */ (await this.uiautomator2.jwproxy.command(`/orientation`, 'GET', {}));
}
exports.getOrientation = getOrientation;
/**
 * @this {AndroidUiautomator2Driver}
 * @param {import('@appium/types').Orientation} orientation
 * @returns {Promise<void>}
 */
async function setOrientation(orientation) {
    orientation = /** @type {import('@appium/types').Orientation} */ (orientation.toUpperCase());
    await this.uiautomator2.jwproxy.command(`/orientation`, 'POST', { orientation });
}
exports.setOrientation = setOrientation;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<string>}
 */
async function getClipboard() {
    return String((await this.adb.getApiLevel()) < 29
        ? await this.uiautomator2.jwproxy.command('/appium/device/get_clipboard', 'POST', {})
        : await this.settingsApp.getClipboard());
}
exports.getClipboard = getClipboard;
/**
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<void>}
 */
async function openNotifications() {
    await this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});
}
exports.openNotifications = openNotifications;
/**
 * Stop proxying to any Chromedriver and redirect to uiautomator2
 * @this {AndroidUiautomator2Driver}
 * @returns {void}
 */
function suspendChromedriverProxy() {
    this.chromedriver = undefined;
    this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
    this.proxyCommand = /** @type {typeof this.proxyCommand} */ (this.uiautomator2.proxyCommand.bind(this.uiautomator2));
    this.jwpProxyActive = true;
}
exports.suspendChromedriverProxy = suspendChromedriverProxy;
/**
 * The list of available info entries can be found at
 * https://github.com/appium/appium-uiautomator2-server/blob/master/app/src/main/java/io/appium/uiautomator2/handler/GetDeviceInfo.java
 * @this {AndroidUiautomator2Driver}
 * @returns {Promise<StringRecord>}
 */
async function mobileGetDeviceInfo() {
    return /** @type {StringRecord} */ (await this.uiautomator2.jwproxy.command('/appium/device/info', 'GET'));
}
exports.mobileGetDeviceInfo = mobileGetDeviceInfo;
/**
 * @template [T=any]
 * @typedef {import('@appium/types').StringRecord<T>} StringRecord
 * @typedef {import('../driver').AndroidUiautomator2Driver} AndroidUiautomator2Driver
 */
//# sourceMappingURL=misc.js.map