"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAllSessionWebSocketHandlers = exports.parseArray = exports.requireArgs = exports.ADB_SHELL_FEATURE = void 0;
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
exports.ADB_SHELL_FEATURE = 'adb_shell';
/**
 * Assert the presence of particular keys in the given object
 *
 * @param {string|string[]} argNames one or more key names
 * @param {any} opts the object to check
 * @returns {Record<string, any>} the same given object
 */
function requireArgs(argNames, opts) {
    for (const argName of lodash_1.default.isArray(argNames) ? argNames : [argNames]) {
        if (!lodash_1.default.has(opts, argName)) {
            throw new driver_1.errors.InvalidArgumentError(`'${argName}' argument must be provided`);
        }
    }
    return opts;
}
exports.requireArgs = requireArgs;
/**
 *
 * @param {string | string[]} cap
 * @returns {string[]}
 */
function parseArray(cap) {
    let parsedCaps;
    try {
        // @ts-ignore this is fine
        parsedCaps = JSON.parse(cap);
    }
    catch (ign) { }
    if (lodash_1.default.isArray(parsedCaps)) {
        return parsedCaps;
    }
    else if (lodash_1.default.isString(cap)) {
        return [cap];
    }
    throw new Error(`must provide a string or JSON Array; received ${cap}`);
}
exports.parseArray = parseArray;
/**
 * @param {import('@appium/types').AppiumServer} server
 * @param {string?} [sessionId]
 * @returns {Promise<void>}
 */
async function removeAllSessionWebSocketHandlers(server, sessionId) {
    if (!server || !lodash_1.default.isFunction(server.getWebSocketHandlers)) {
        return;
    }
    const activeHandlers = await server.getWebSocketHandlers(sessionId);
    for (const pathname of lodash_1.default.keys(activeHandlers)) {
        await server.removeWebSocketHandler(pathname);
    }
}
exports.removeAllSessionWebSocketHandlers = removeAllSessionWebSocketHandlers;
//# sourceMappingURL=utils.js.map