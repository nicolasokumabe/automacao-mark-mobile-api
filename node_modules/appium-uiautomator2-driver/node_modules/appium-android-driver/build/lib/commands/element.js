"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocationInView = exports.setValueImmediate = exports.replaceValue = exports.setValue = exports.doSetElementValue = exports.setElementValue = exports.elementSelected = exports.elementEnabled = exports.elementDisplayed = exports.getName = exports.getSize = exports.getLocation = exports.getText = exports.click = exports.getAttribute = void 0;
const driver_1 = require("appium/driver");
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} attribute
 * @param {string} elementId
 * @returns {Promise<string?>}
 */
async function getAttribute(attribute, elementId) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.getAttribute = getAttribute;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<void>}
 */
async function click(elementId) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.click = click;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<string>}
 */
async function getText(elementId) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.getText = getText;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<import('@appium/types').Position>}
 */
async function getLocation(elementId) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.getLocation = getLocation;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<import('@appium/types').Size>}
 */
async function getSize(elementId) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.getSize = getSize;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<string>}
 */
async function getName(elementId) {
    return /** @type {string} */ (await this.getAttribute('className', elementId));
}
exports.getName = getName;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<boolean>}
 */
async function elementDisplayed(elementId) {
    return (await this.getAttribute('displayed', elementId)) === 'true';
}
exports.elementDisplayed = elementDisplayed;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<boolean>}
 */
async function elementEnabled(elementId) {
    return (await this.getAttribute('enabled', elementId)) === 'true';
}
exports.elementEnabled = elementEnabled;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<boolean>}
 */
async function elementSelected(elementId) {
    return (await this.getAttribute('selected', elementId)) === 'true';
}
exports.elementSelected = elementSelected;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string|string[]} keys
 * @param {string} elementId
 * @param {boolean} [replace=false]
 * @returns {Promise<void>}
 */
async function setElementValue(keys, elementId, replace = false) {
    const text = keys instanceof Array ? keys.join('') : keys;
    return await this.doSetElementValue({
        elementId,
        text: String(text),
        replace,
    });
}
exports.setElementValue = setElementValue;
/**
 * Reason for isolating doSetElementValue from setElementValue is for reusing setElementValue
 * across android-drivers (like appium-uiautomator2-driver) and to avoid code duplication.
 * Other android-drivers (like appium-uiautomator2-driver) need to override doSetElementValue
 * to facilitate setElementValue.
 *
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').DoSetElementValueOpts} params
 * @returns {Promise<void>}
 */
async function doSetElementValue(params) {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.doSetElementValue = doSetElementValue;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string|string[]} keys
 * @param {string} elementId
 * @returns {Promise<void>}
 */
async function setValue(keys, elementId) {
    return await this.setElementValue(keys, elementId, false);
}
exports.setValue = setValue;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string|string[]} keys
 * @param {string} elementId
 * @returns {Promise<void>}
 */
async function replaceValue(keys, elementId) {
    return await this.setElementValue(keys, elementId, true);
}
exports.replaceValue = replaceValue;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string|string[]} keys
 * @param {string} elementId
 * @returns {Promise<void>}
 */
async function setValueImmediate(keys, elementId) {
    const text = Array.isArray(keys) ? keys.join('') : keys;
    // first, make sure we are focused on the element
    await this.click(elementId);
    // then send through adb
    await this.adb.inputText(/** @type {string} */ (text));
}
exports.setValueImmediate = setValueImmediate;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} elementId
 * @returns {Promise<import('@appium/types').Position>}
 */
async function getLocationInView(elementId) {
    return await this.getLocation(elementId);
}
exports.getLocationInView = getLocationInView;
//# sourceMappingURL=element.js.map