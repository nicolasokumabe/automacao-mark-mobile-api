"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openNotifications = exports.mobileListSms = exports.mobileGetNotifications = exports.getDisplayDensity = exports.setUrl = exports.getWindowRect = exports.getWindowSize = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<import('@appium/types').Size>}
 */
async function getWindowSize() {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.getWindowSize = getWindowSize;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<import('@appium/types').Rect>}
 */
async function getWindowRect() {
    const { width, height } = await this.getWindowSize();
    return {
        width,
        height,
        x: 0,
        y: 0,
    };
}
exports.getWindowRect = getWindowRect;
/**
 * we override setUrl to take an android URI which can be used for deep-linking
 * inside an app, similar to starting an intent
 *
 * @this {import('../driver').AndroidDriver}
 * @param {string} uri
 * @returns {Promise<void>}
 */
async function setUrl(uri) {
    await this.adb.startUri(uri, /** @type {string} */ (this.opts.appPackage));
}
exports.setUrl = setUrl;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<number>}
 */
async function getDisplayDensity() {
    // first try the property for devices
    let out = await this.adb.shell(['getprop', 'ro.sf.lcd_density']);
    if (out) {
        let val = parseInt(out, 10);
        // if the value is NaN, try getting the emulator property
        if (!isNaN(val)) {
            return val;
        }
        this.log.debug(`Parsed density value was NaN: "${out}"`);
    }
    // fallback to trying property for emulators
    out = await this.adb.shell(['getprop', 'qemu.sf.lcd_density']);
    if (out) {
        let val = parseInt(out, 10);
        if (!isNaN(val)) {
            return val;
        }
        this.log.debug(`Parsed density value was NaN: "${out}"`);
    }
    // couldn't get anything, so error out
    throw this.log.errorAndThrow('Failed to get display density property.');
}
exports.getDisplayDensity = getDisplayDensity;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<StringRecord>}
 */
async function mobileGetNotifications() {
    return await this.settingsApp.getNotifications();
}
exports.mobileGetNotifications = mobileGetNotifications;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<import('./types').SmsListResult>}
 */
async function mobileListSms(opts) {
    return await this.settingsApp.getSmsList(opts);
}
exports.mobileListSms = mobileListSms;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
async function openNotifications() {
    throw new driver_1.errors.NotImplementedError('Not implemented');
}
exports.openNotifications = openNotifications;
/**
 * @typedef {import('appium-adb').ADB} ADB
 * @typedef {import('@appium/types').StringRecord} StringRecord
 */
//# sourceMappingURL=misc.js.map