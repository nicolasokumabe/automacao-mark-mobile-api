"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sensorSet = exports.mobileNetworkSpeed = exports.networkSpeed = exports.mobilePowerCapacity = exports.powerCapacity = exports.mobilePowerAc = exports.powerAC = exports.mobileGsmVoice = exports.gsmVoice = exports.mobileGsmSignal = exports.gsmSignal = exports.mobileGsmCall = exports.gsmCall = exports.mobileSendSms = exports.sendSMS = exports.mobileFingerprint = exports.fingerprint = void 0;
const support_1 = require("@appium/support");
const utils_1 = require("../../utils");
const utils_2 = require("./utils");
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string|number} fingerprintId
 * @returns {Promise<void>}
 */
async function fingerprint(fingerprintId) {
    utils_2.requireEmulator.bind(this)('fingerprint is only available for emulators');
    await this.adb.fingerprint(String(fingerprintId));
}
exports.fingerprint = fingerprint;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').FingerprintOpts} opts
 * @returns {Promise<void>}
 */
async function mobileFingerprint(opts) {
    const { fingerprintId } = (0, utils_1.requireArgs)('fingerprintId', opts);
    await this.fingerprint(fingerprintId);
}
exports.mobileFingerprint = mobileFingerprint;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber
 * @param {string} message
 * @returns {Promise<void>}
 */
async function sendSMS(phoneNumber, message) {
    utils_2.requireEmulator.bind(this)('sendSMS is only available for emulators');
    await this.adb.sendSMS(phoneNumber, message);
}
exports.sendSMS = sendSMS;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').SendSMSOpts} opts
 * @returns {Promise<void>}
 */
async function mobileSendSms(opts) {
    const { phoneNumber, message } = (0, utils_1.requireArgs)(['phoneNumber', 'message'], opts);
    await this.sendSMS(phoneNumber, message);
}
exports.mobileSendSms = mobileSendSms;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber
 * @param {string} action
 * @returns {Promise<void>}
 */
async function gsmCall(phoneNumber, action) {
    utils_2.requireEmulator.bind(this)('gsmCall is only available for emulators');
    await this.adb.gsmCall(phoneNumber, /** @type {any} */ (action));
}
exports.gsmCall = gsmCall;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmCallOpts} opts
 * @returns {Promise<void>}
 */
async function mobileGsmCall(opts) {
    const { phoneNumber, action } = (0, utils_1.requireArgs)(['phoneNumber', 'action'], opts);
    await this.gsmCall(phoneNumber, action);
}
exports.mobileGsmCall = mobileGsmCall;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmSignalStrength} signalStrengh
 * @returns {Promise<void>}
 */
async function gsmSignal(signalStrengh) {
    utils_2.requireEmulator.bind(this)('gsmSignal is only available for emulators');
    await this.adb.gsmSignal(signalStrengh);
}
exports.gsmSignal = gsmSignal;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmSignalStrengthOpts} opts
 * @returns {Promise<void>}
 */
async function mobileGsmSignal(opts) {
    const { strength } = (0, utils_1.requireArgs)('strength', opts);
    await this.gsmSignal(strength);
}
exports.mobileGsmSignal = mobileGsmSignal;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmVoiceState} state
 * @returns {Promise<void>}
 */
async function gsmVoice(state) {
    utils_2.requireEmulator.bind(this)('gsmVoice is only available for emulators');
    await this.adb.gsmVoice(state);
}
exports.gsmVoice = gsmVoice;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmVoiceOpts} opts
 * @returns {Promise<void>}
 */
async function mobileGsmVoice(opts) {
    const { state } = (0, utils_1.requireArgs)('state', opts);
    await this.gsmVoice(state);
}
exports.mobileGsmVoice = mobileGsmVoice;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').PowerACState} state
 * @returns {Promise<void>}
 */
async function powerAC(state) {
    utils_2.requireEmulator.bind(this)('powerAC is only available for emulators');
    await this.adb.powerAC(state);
}
exports.powerAC = powerAC;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').PowerACOpts} opts
 * @returns {Promise<void>}
 */
async function mobilePowerAc(opts) {
    const { state } = (0, utils_1.requireArgs)('state', opts);
    await this.powerAC(state);
}
exports.mobilePowerAc = mobilePowerAc;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {number} batteryPercent
 * @returns {Promise<void>}
 */
async function powerCapacity(batteryPercent) {
    utils_2.requireEmulator.bind(this)('powerCapacity is only available for emulators');
    await this.adb.powerCapacity(batteryPercent);
}
exports.powerCapacity = powerCapacity;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').PowerCapacityOpts} opts
 * @return {Promise<void>}
 */
async function mobilePowerCapacity(opts) {
    const { percent } = (0, utils_1.requireArgs)('percent', opts);
    await this.powerCapacity(percent);
}
exports.mobilePowerCapacity = mobilePowerCapacity;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').NetworkSpeed} networkSpeed
 * @returns {Promise<void>}
 */
async function networkSpeed(networkSpeed) {
    utils_2.requireEmulator.bind(this)('networkSpeed is only available for emulators');
    await this.adb.networkSpeed(networkSpeed);
}
exports.networkSpeed = networkSpeed;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').NetworkSpeedOpts} opts
 * @returns {Promise<void>}
 */
async function mobileNetworkSpeed(opts) {
    const { speed } = (0, utils_1.requireArgs)('speed', opts);
    await this.networkSpeed(speed);
}
exports.mobileNetworkSpeed = mobileNetworkSpeed;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').SensorSetOpts} opts
 * @returns {Promise<void>}
 */
async function sensorSet(opts) {
    utils_2.requireEmulator.bind(this)('sensorSet is only available for emulators');
    const { sensorType, value } = opts;
    if (!support_1.util.hasValue(sensorType)) {
        this.log.errorAndThrow(`'sensorType' argument is required`);
    }
    if (!support_1.util.hasValue(value)) {
        this.log.errorAndThrow(`'value' argument is required`);
    }
    await this.adb.sensorSet(sensorType, /** @type {any} */ (value));
}
exports.sensorSet = sensorSet;
/**
 * @typedef {import('appium-adb').ADB} ADB
 */
//# sourceMappingURL=emulator-actions.js.map