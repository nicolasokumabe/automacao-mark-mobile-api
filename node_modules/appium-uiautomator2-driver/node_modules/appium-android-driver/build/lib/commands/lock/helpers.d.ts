/**
 *
 * @param {import('../types').UnlockType} unlockType
 * @returns {string}
 */
export function toCredentialType(unlockType: import('../types').UnlockType): string;
/**
 * @template {AndroidDriverCaps} T
 * @param {T} caps
 * @returns {T}
 */
export function validateUnlockCapabilities<T extends import("@appium/types").ConstraintsToCaps<{
    readonly platformName: {
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["Android"];
        readonly presence: true;
    };
    readonly deviceName: {
        readonly isString: true;
    };
    readonly appActivity: {
        readonly isString: true;
    };
    readonly appPackage: {
        readonly isString: true;
    };
    readonly appWaitActivity: {
        readonly isString: true;
    };
    readonly appWaitPackage: {
        readonly isString: true;
    };
    readonly appWaitDuration: {
        readonly isNumber: true;
    };
    readonly deviceReadyTimeout: {
        readonly isNumber: true;
    };
    readonly androidDeviceReadyTimeout: {
        readonly isNumber: true;
    };
    readonly androidDeviceSocket: {
        readonly isString: true;
    };
    readonly androidInstallTimeout: {
        readonly isNumber: true; /**
         *
         * @param {any} value
         * @returns {value is string}
         */
    };
    readonly adbPort: {
        readonly isNumber: true;
    };
    readonly remoteAdbHost: {
        readonly isString: true;
    };
    readonly adbExecTimeout: {
        readonly isNumber: true;
    };
    readonly avd: {
        readonly isString: true;
    };
    readonly avdLaunchTimeout: {
        readonly isNumber: true;
    };
    readonly avdReadyTimeout: {
        readonly isNumber: true;
    };
    readonly avdArgs: {};
    readonly avdEnv: {
        readonly isObject: true;
    };
    readonly useKeystore: {
        readonly isBoolean: true;
    };
    readonly keystorePath: {
        readonly isString: true;
    };
    readonly keystorePassword: {
        readonly isString: true;
    };
    readonly keyAlias: {
        readonly isString: true;
    };
    readonly keyPassword: {
        readonly isString: true;
    };
    readonly webviewDevtoolsPort: {
        readonly isNumber: true;
    };
    readonly ensureWebviewsHavePages: {
        readonly isBoolean: true;
    };
    readonly enableWebviewDetailsCollection: {
        readonly isBoolean: true;
    };
    readonly chromedriverPort: {
        readonly isNumber: true;
    };
    readonly chromedriverPorts: {
        readonly isArray: true;
    };
    readonly chromedriverArgs: {
        readonly isObject: true;
    };
    readonly chromedriverExecutable: {
        readonly isString: true;
    };
    readonly chromedriverExecutableDir: {
        readonly isString: true;
    };
    readonly chromedriverChromeMappingFile: {
        readonly isString: true;
    };
    readonly chromedriverUseSystemExecutable: {
        readonly isBoolean: true;
    };
    readonly chromedriverDisableBuildCheck: {
        readonly isBoolean: true;
    };
    readonly chromeLoggingPrefs: {
        readonly isObject: true;
    };
    readonly autoWebviewTimeout: {
        readonly isNumber: true;
    };
    readonly autoWebviewName: {
        readonly isString: true;
    };
    readonly intentAction: {
        readonly isString: true;
    };
    readonly intentCategory: {
        readonly isString: true;
    };
    readonly intentFlags: {
        readonly isString: true;
    };
    readonly optionalIntentArguments: {
        readonly isString: true;
    };
    readonly dontStopAppOnReset: {
        readonly isBoolean: true;
    };
    readonly unicodeKeyboard: {
        readonly isBoolean: true;
    };
    readonly hideKeyboard: {
        readonly isBoolean: true;
    };
    readonly noSign: {
        readonly isBoolean: true;
    };
    readonly recreateChromeDriverSessions: {
        readonly isBoolean: false;
    };
    readonly autoLaunch: {
        readonly isBoolean: true;
    };
    readonly nativeWebScreenshot: {
        readonly isBoolean: true;
    };
    readonly clearSystemFiles: {
        readonly isBoolean: true;
    };
    readonly extractChromeAndroidPackageFromContextName: {
        readonly isBoolean: true;
    };
    readonly autoGrantPermissions: {
        readonly isBoolean: true;
    };
    readonly networkSpeed: {
        readonly isString: true;
    };
    readonly gpsEnabled: {
        readonly isBoolean: true;
    };
    readonly isHeadless: {
        readonly isBoolean: true;
    };
    readonly showChromedriverLog: {
        readonly isBoolean: true;
    };
    readonly skipUnlock: {
        readonly isBoolean: true;
    };
    readonly clearDeviceLogsOnStart: {
        readonly isBoolean: true;
    };
    readonly unlockType: {
        readonly isString: true;
    };
    readonly unlockKey: {
        readonly isString: true;
    };
    readonly unlockStrategy: {
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["locksettings", "uiautomator"];
    };
    readonly otherApps: {
        readonly isString: true;
    };
    readonly uninstallOtherPackages: {
        readonly isString: true;
    };
    /**
     * @this {AndroidDriver}
     * @param {import('../types').FastUnlockOptions} opts
     */
    readonly allowTestPackages: {
        readonly isBoolean: true;
    };
    readonly pageLoadStrategy: {
        readonly isString: true;
    };
    readonly localeScript: {
        readonly isString: true;
    };
    readonly skipDeviceInitialization: {
        readonly isBoolean: true;
    };
    readonly remoteAppsCacheLimit: {
        readonly isNumber: true;
    };
    readonly buildToolsVersion: {
        readonly isString: true;
    };
    readonly skipLogcatCapture: {
        readonly isBoolean: true;
    };
    readonly chromeOptions: {
        readonly isObject: true;
    };
    readonly enablePerformanceLogging: {
        readonly isBoolean: true;
    };
    readonly userProfile: {
        readonly isNumber: true;
    };
    readonly browserName: {
        readonly isString: true;
    };
    readonly enforceAppInstall: {
        readonly isBoolean: true;
    };
    readonly suppressKillServer: {
        readonly isBoolean: true;
    };
    readonly allowOfflineDevices: {
        readonly isBoolean: true;
    };
    readonly ignoreHiddenApiPolicyError: {
        readonly isBoolean: true;
    };
    readonly unlockSuccessTimeout: {
        readonly isNumber: true;
    };
    readonly mockLocationApp: {
        readonly isString: true;
    };
    readonly logcatFormat: {
        readonly isString: true;
    };
    readonly logcatFilterSpecs: {
        readonly isArray: true;
    };
    readonly allowDelayAdb: {
        readonly isBoolean: true;
    };
    readonly ignoreUnimportantViews: {
        readonly isBoolean: true;
    };
    readonly disableWindowAnimation: {
        readonly isBoolean: true;
    };
    readonly appWaitForLaunch: {
        readonly isBoolean: true;
    };
}>>(caps: T): T;
/**
 * @this {AndroidDriver}
 * @param {import('../types').FastUnlockOptions} opts
 */
export function fastUnlock(this: import("../../driver").AndroidDriver, opts: import('../types').FastUnlockOptions): Promise<void>;
/**
 *
 * @param {string} key
 * @returns {string}
 */
export function encodePassword(key: string): string;
/**
 *
 * @param {string} key
 * @returns {string[]}
 */
export function stringKeyToArr(key: string): string[];
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function fingerprintUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function pinUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function pinUnlockWithKeyEvent(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function passwordUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 *
 * @param {number} key
 * @param {import('@appium/types').Position} initPos
 * @param {number} piece
 * @returns {import('@appium/types').Position}
 */
export function getPatternKeyPosition(key: number, initPos: import('@appium/types').Position, piece: number): import('@appium/types').Position;
/**
 * @param {string[]|number[]} keys
 * @param {import('@appium/types').Position} initPos
 * @param {number} piece
 * @returns {import('@appium/types').StringRecord[]}
 */
export function getPatternActions(keys: string[] | number[], initPos: import('@appium/types').Position, piece: number): import('@appium/types').StringRecord[];
/**
 * @this {AndroidDriver}
 * @param {number?} [timeoutMs=null]
 */
export function verifyUnlock(this: import("../../driver").AndroidDriver, timeoutMs?: number | null | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 */
export function patternUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
export const PIN_UNLOCK: "pin";
export const PIN_UNLOCK_KEY_EVENT: "pinWithKeyEvent";
export const PASSWORD_UNLOCK: "password";
export const PATTERN_UNLOCK: "pattern";
export const FINGERPRINT_UNLOCK: "fingerprint";
export const KEYCODE_NUMPAD_ENTER: 66;
export const UNLOCK_WAIT_TIME: 100;
export const INPUT_KEYS_WAIT_TIME: 100;
export type AndroidDriverCaps = import('@appium/types').Capabilities<import('../../constraints').AndroidDriverConstraints>;
export type AndroidDriver = import('../../driver').AndroidDriver;
//# sourceMappingURL=helpers.d.ts.map